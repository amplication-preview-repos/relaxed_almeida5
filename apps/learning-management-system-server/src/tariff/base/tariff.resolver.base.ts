/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Tariff } from "./Tariff";
import { TariffCountArgs } from "./TariffCountArgs";
import { TariffFindManyArgs } from "./TariffFindManyArgs";
import { TariffFindUniqueArgs } from "./TariffFindUniqueArgs";
import { CreateTariffArgs } from "./CreateTariffArgs";
import { UpdateTariffArgs } from "./UpdateTariffArgs";
import { DeleteTariffArgs } from "./DeleteTariffArgs";
import { CourseFindManyArgs } from "../../course/base/CourseFindManyArgs";
import { Course } from "../../course/base/Course";
import { Client } from "../../client/base/Client";
import { TariffService } from "../tariff.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Tariff)
export class TariffResolverBase {
  constructor(
    protected readonly service: TariffService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Tariff",
    action: "read",
    possession: "any",
  })
  async _tariffsMeta(
    @graphql.Args() args: TariffCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Tariff])
  @nestAccessControl.UseRoles({
    resource: "Tariff",
    action: "read",
    possession: "any",
  })
  async tariffs(@graphql.Args() args: TariffFindManyArgs): Promise<Tariff[]> {
    return this.service.tariffs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Tariff, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Tariff",
    action: "read",
    possession: "own",
  })
  async tariff(
    @graphql.Args() args: TariffFindUniqueArgs
  ): Promise<Tariff | null> {
    const result = await this.service.tariff(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tariff)
  @nestAccessControl.UseRoles({
    resource: "Tariff",
    action: "create",
    possession: "any",
  })
  async createTariff(@graphql.Args() args: CreateTariffArgs): Promise<Tariff> {
    return await this.service.createTariff({
      ...args,
      data: {
        ...args.data,

        client: args.data.client
          ? {
              connect: args.data.client,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tariff)
  @nestAccessControl.UseRoles({
    resource: "Tariff",
    action: "update",
    possession: "any",
  })
  async updateTariff(
    @graphql.Args() args: UpdateTariffArgs
  ): Promise<Tariff | null> {
    try {
      return await this.service.updateTariff({
        ...args,
        data: {
          ...args.data,

          client: args.data.client
            ? {
                connect: args.data.client,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tariff)
  @nestAccessControl.UseRoles({
    resource: "Tariff",
    action: "delete",
    possession: "any",
  })
  async deleteTariff(
    @graphql.Args() args: DeleteTariffArgs
  ): Promise<Tariff | null> {
    try {
      return await this.service.deleteTariff(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Course], { name: "courses" })
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "read",
    possession: "any",
  })
  async findCourses(
    @graphql.Parent() parent: Tariff,
    @graphql.Args() args: CourseFindManyArgs
  ): Promise<Course[]> {
    const results = await this.service.findCourses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Client, {
    nullable: true,
    name: "client",
  })
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "read",
    possession: "any",
  })
  async getClient(@graphql.Parent() parent: Tariff): Promise<Client | null> {
    const result = await this.service.getClient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
