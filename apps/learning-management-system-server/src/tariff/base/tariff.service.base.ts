/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Tariff as PrismaTariff,
  Course as PrismaCourse,
  Client as PrismaClient,
} from "@prisma/client";

export class TariffServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TariffCountArgs, "select">): Promise<number> {
    return this.prisma.tariff.count(args);
  }

  async tariffs(args: Prisma.TariffFindManyArgs): Promise<PrismaTariff[]> {
    return this.prisma.tariff.findMany(args);
  }
  async tariff(
    args: Prisma.TariffFindUniqueArgs
  ): Promise<PrismaTariff | null> {
    return this.prisma.tariff.findUnique(args);
  }
  async createTariff(args: Prisma.TariffCreateArgs): Promise<PrismaTariff> {
    return this.prisma.tariff.create(args);
  }
  async updateTariff(args: Prisma.TariffUpdateArgs): Promise<PrismaTariff> {
    return this.prisma.tariff.update(args);
  }
  async deleteTariff(args: Prisma.TariffDeleteArgs): Promise<PrismaTariff> {
    return this.prisma.tariff.delete(args);
  }

  async findCourses(
    parentId: string,
    args: Prisma.CourseFindManyArgs
  ): Promise<PrismaCourse[]> {
    return this.prisma.tariff
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .courses(args);
  }

  async getClient(parentId: string): Promise<PrismaClient | null> {
    return this.prisma.tariff
      .findUnique({
        where: { id: parentId },
      })
      .client();
  }
}
